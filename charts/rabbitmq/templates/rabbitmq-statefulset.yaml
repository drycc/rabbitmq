{{- if eq .Values.global.rabbitmqLocation "on-cluster" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: drycc-rabbitmq
  labels:
    heritage: drycc
  annotations:
    component.drycc.cc/version: {{ .Values.imageTag }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: drycc-rabbitmq
  selector:
    matchLabels:
      app: drycc-rabbitmq
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app: drycc-rabbitmq
    spec:
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset.type "component" "" "extraMatchLabels" .Values.podAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset.type "component" "" "extraMatchLabels" .Values.podAntiAffinityPreset.extraMatchLabels "topologyKey" "" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values ) | nindent 10 }}
      serviceAccount: drycc-rabbitmq
      containers:
      - name: drycc-rabbitmq
        image: {{.Values.imageRegistry}}/{{.Values.imageOrg}}/rabbitmq:{{.Values.imageTag}}
        imagePullPolicy: {{.Values.imagePullPolicy}}
        ports:
        - containerPort: 5672
        {{- if or (.Values.limits_cpu) (.Values.limits_memory)}}
        resources:
          limits:
            {{- if (.Values.limits_cpu) }}
            cpu: {{.Values.limits_cpu}}
            {{- end}}
            {{- if (.Values.limits_memory) }}
            memory: {{.Values.limits_memory}}
            {{- end}}
        {{- end}}
        args:
        - bash
        - -c
        - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE};
          cp -v /etc/rabbitmq/enabled_plugins ${RABBITMQ_ENABLED_PLUGINS_FILE};
          cp /var/run/secrets/drycc/rabbitmq/creds/cookie $HOME/.erlang.cookie;
          chmod 600 $HOME/.erlang.cookie; exec start-rabbitmq
        env:
        - name: K8S_SERVICE_NAME
          value: drycc-rabbitmq
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_REPLICAS
          value: "{{.Values.replicas}}"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_NODENAME
          value: rabbit@$(POD_NAME).drycc-rabbitmq.$(POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_CONFIG_FILE
          value: /data/rabbitmq.conf
        - name: RABBITMQ_ENABLED_PLUGINS_FILE
          value: /data/enabled_plugins
        - name: RABBITMQ_MNESIA_BASE
          value: /data/mnesia
        - name: RABBITMQ_LOG_BASE
          value: /data/log
        - name: RABBITMQ_SHARDS_PER_NODE
          value: "{{.Values.shardsPerNode}}"
        - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
          value: +K true +sub true +sbwt none
        lifecycle:
          preStop:
            exec:
              command:
              - init-stack
              - bash
              - -ec
              - rabbitmqctl stop_app
        startupProbe:
          tcpSocket:
            port: 5672
        livenessProbe:
          exec:
            command:
            - init-stack
            - bash
            - -ec
            - rabbitmq-diagnostics -q check_running
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - init-stack
            - bash
            - -ec
            - rabbitmq-diagnostics -q ping
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: rabbitmq-config
          readOnly: false
          mountPath: /etc/rabbitmq
        - name: rabbitmq-creds
          mountPath: /var/run/secrets/drycc/rabbitmq/creds
        {{- if .Values.persistence.enabled }}
        - name: rabbitmq-data
          mountPath: /data
        {{- end }}
      volumes:
      - name: rabbitmq-creds
        secret:
          secretName: rabbitmq-creds
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
  {{- end }}
{{- end }}
